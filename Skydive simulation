{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d22b35fe",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div id=\"glowscript\" class=\"glowscript\"></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "if (typeof Jupyter !== \"undefined\") { window.__context = { glowscript_container: $(\"#glowscript\").removeAttr(\"id\")};}else{ element.textContent = ' ';}"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "if (typeof Jupyter !== \"undefined\") {require.undef(\"nbextensions/vpython_libraries/glow.min\");}else{element.textContent = ' ';}"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "if (typeof Jupyter !== \"undefined\") {require.undef(\"nbextensions/vpython_libraries/glowcomm\");}else{element.textContent = ' ';}"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "if (typeof Jupyter !== \"undefined\") {require.undef(\"nbextensions/vpython_libraries/jquery-ui.custom.min\");}else{element.textContent = ' ';}"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "if (typeof Jupyter !== \"undefined\") {require([\"nbextensions/vpython_libraries/glow.min\"], function(){console.log(\"GLOW LOADED\");});}else{element.textContent = ' ';}"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "if (typeof Jupyter !== \"undefined\") {require([\"nbextensions/vpython_libraries/glowcomm\"], function(){console.log(\"GLOWCOMM LOADED\");});}else{element.textContent = ' ';}"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "if (typeof Jupyter !== \"undefined\") {require([\"nbextensions/vpython_libraries/jquery-ui.custom.min\"], function(){console.log(\"JQUERY LOADED\");});}else{element.textContent = ' ';}"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\"\"\"This simple program graphically illustrates a skydiver falling from \n",
    "close to 120,000 feet above see level. By creating a basic function to \n",
    "model the air density the program can then intergrate the acceleration\n",
    "then the velocity and position.\"\"\"\n",
    "\n",
    "import numpy as np\n",
    "import vpython as vp\n",
    "\n",
    "# variable delcarations \n",
    "\n",
    "M = 0.0289644 # molar mass of dry air\n",
    "R = 8.31447   # ideal gas constant\n",
    "P0 = 101325   # sea level standard atmospheric pressure\n",
    "L = 0.0065    # temperature lapse rate (Kelvin per meter)\n",
    "T0 = 288.15   # sea level standard temperature\n",
    "rho_0 = 1.22  # rho constant at sea level\n",
    "gravity = 9.8 \n",
    "\n",
    "h_n = 10400\n",
    "\n",
    "c = 1.2    # drag coefficient \n",
    "A = 1      # area of skydiver\n",
    "dt = .01   # delt time \n",
    "t = 0      # intital value of time\n",
    "\n",
    "velocity = 0 \n",
    "mass = 120\n",
    "height = 40000\n",
    "time = 0\n",
    "\n",
    "# function to calculate the air pressure at given height\n",
    "def Rho(h): \n",
    "    \n",
    "    P = P0*(1-(L*h)/T0)**((gravity*M)/(R*L))\n",
    "    \n",
    "    T = T0 - L*h\n",
    "    \n",
    "    ph = (P*M) / (R*T)\n",
    "    \n",
    "    return ph \n",
    "\n",
    "# graphs \n",
    "vp.graph(title = \"Air density Vs. Height\", \n",
    "        xTitle = \"Height (m)\", \n",
    "        ytitle = \"Air Density (kg/m^3)\")\n",
    "RhoGraph = vp.gcurve()\n",
    "\n",
    "vp.graph(title = \"Acceleration Vs. Height\",\n",
    "        xTitle = \"Height (m)\",\n",
    "        yTitle = \"Acceration (m/s^2)\")\n",
    "\n",
    "accelerationGraph = vp.gcurve()\n",
    "\n",
    "vp.graph(title = \"Velocity\",\n",
    "        xTitle = \"Height (m)\",\n",
    "        yTitle = \"Acceration (m/s^2)\")\n",
    "\n",
    "velocityGraph = vp.gcurve()\n",
    "\n",
    "vp.graph(title = \"Position\",\n",
    "        xTitle = \"Time\",\n",
    "        yTitle = \"Height\")\n",
    "\n",
    "heightGraph = vp.gcurve()\n",
    "\n",
    "\n",
    "# while loop to integrate and compute acceleration, height and velocity\n",
    "while height > 0:\n",
    "    \n",
    "    ph = Rho(height) # calculate the air pressure \n",
    "    \n",
    "    acceleration = ((c*ph*A*(velocity**2)/2) - mass*gravity) / mass\n",
    "    \n",
    "    velocity += acceleration*dt\n",
    "    \n",
    "    height += velocity*dt\n",
    "    \n",
    "    time += dt \n",
    "    \n",
    "    # plot graphs\n",
    "    RhoGraph.plot(height, Rho(height))\n",
    "    accelerationGraph.plot(time, acceleration)\n",
    "    velocityGraph.plot(time, velocity)\n",
    "    heightGraph.plot(time, height)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6687f476",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cfcd9036",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
